{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: \"Manager\",\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      notifications: [],\n      // 通知列表\n      showNotifications: false,\n      // 控制通知列表显示\n      notificationTimer: null // 轮询定时器\n    };\n  },\n\n  created() {\n    if (!this.user.id) {\n      this.$router.push('/login');\n    }\n    this.loadNotifications(); // 加载通知\n    // 启动轮询，每30秒检查一次新通知\n    this.startNotificationPolling();\n  },\n  beforeDestroy() {\n    // 组件销毁前清除定时器\n    this.stopNotificationPolling();\n  },\n  methods: {\n    updateUser() {\n      this.user = JSON.parse(localStorage.getItem('xm-user') || '{}'); // 重新获取下用户的最新信息\n    },\n\n    goToPerson() {\n      if (this.user.role === 'ADMIN') {\n        this.$router.push('/adminPerson');\n      } else if (this.user.role === 'BUSINESS') {\n        this.$router.push('/businessPerson');\n      }\n    },\n    logout() {\n      localStorage.removeItem('xm-user');\n      this.$router.push('/login');\n    },\n    // 启动通知轮询\n    startNotificationPolling() {\n      // 清除可能存在的旧定时器\n      this.stopNotificationPolling();\n      // 设置新的定时器，每30秒执行一次\n      this.notificationTimer = setInterval(() => {\n        this.loadNotifications();\n      }, 30000); // 30秒\n    },\n\n    // 停止通知轮询\n    stopNotificationPolling() {\n      if (this.notificationTimer) {\n        clearInterval(this.notificationTimer);\n        this.notificationTimer = null;\n      }\n    },\n    // 加载通知列表\n    loadNotifications() {\n      this.$request.get('/orderNotic/getAll').then(res => {\n        if (res.code === '200') {\n          const oldLength = this.notifications.length;\n          this.notifications = res.data || [];\n          // 如果有新通知，显示提示\n          if (this.notifications.length > oldLength) {\n            this.$notify({\n              title: '新订单通知',\n              message: `您有${this.notifications.length - oldLength}条新订单通知`,\n              type: 'info',\n              duration: 3000\n            });\n          }\n        }\n      });\n    },\n    // 删除通知\n    deleteNotification(id) {\n      this.$confirm('确认删除该通知吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.$request.post('/orderNotic/logicDel', {\n          id\n        }).then(res => {\n          if (res.code === '200') {\n            this.$message.success('删除成功');\n            this.loadNotifications(); // 重新加载通知列表\n          }\n        });\n      }).catch(() => {});\n    },\n    // 清空所有通知\n    clearAllNotifications() {\n      this.$confirm('确认清空所有通知吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 逐个删除通知\n        const deletePromises = this.notifications.map(item => this.$request.post('/orderNotic/logicDel', {\n          id: item.noticeId\n        }));\n        Promise.all(deletePromises).then(() => {\n          this.$message.success('清空成功');\n          this.loadNotifications(); // 重新加载通知列表\n        });\n      }).catch(() => {});\n    }\n  }\n};","map":{"version":3,"names":["name","data","user","JSON","parse","localStorage","getItem","notifications","showNotifications","notificationTimer","created","id","$router","push","loadNotifications","startNotificationPolling","beforeDestroy","stopNotificationPolling","methods","updateUser","goToPerson","role","logout","removeItem","setInterval","clearInterval","$request","get","then","res","code","oldLength","length","$notify","title","message","type","duration","deleteNotification","$confirm","confirmButtonText","cancelButtonText","post","$message","success","catch","clearAllNotifications","deletePromises","map","item","noticeId","Promise","all"],"sources":["src/views/Manager.vue"],"sourcesContent":["<template>\r\n  <div class=\"manager-container\">\r\n    <!--  头部  -->\r\n    <div class=\"manager-header\">\r\n      <div class=\"manager-header-left\">\r\n        <img src=\"@/assets/imgs/logo.png\" />\r\n        <div class=\"title\">后台管理系统</div>\r\n      </div>\r\n\r\n      <div class=\"manager-header-center\">\r\n        <el-breadcrumb separator-class=\"el-icon-arrow-right\">\r\n          <el-breadcrumb-item :to=\"{ path: '/' }\">首页</el-breadcrumb-item>\r\n          <el-breadcrumb-item :to=\"{ path: $route.path }\">{{ $route.meta.name }}</el-breadcrumb-item>\r\n        </el-breadcrumb>\r\n      </div>\r\n\r\n      <div class=\"manager-header-right\">\r\n        <!-- 通知图标 -->\r\n        <el-badge :value=\"notifications.length\" :hidden=\"notifications.length === 0\" class=\"notice-badge\">\r\n          <el-popover\r\n            placement=\"bottom\"\r\n            width=\"400\"\r\n            trigger=\"click\"\r\n            v-model=\"showNotifications\">\r\n            <div class=\"notification-list\">\r\n              <div class=\"notification-header\">\r\n                <span>订单通知</span>\r\n                <el-button type=\"text\" @click=\"clearAllNotifications\" v-if=\"notifications.length > 0\">清空</el-button>\r\n              </div>\r\n              <div v-if=\"notifications.length === 0\" class=\"empty-notice\">\r\n                暂无通知\r\n              </div>\r\n              <div v-else class=\"notification-items\">\r\n                <div v-for=\"item in notifications\" :key=\"item.id\" class=\"notification-item\">\r\n                  <div class=\"notification-content\">\r\n                    <div class=\"notification-title\">\r\n                      <span>订单号：{{ item.orderNo }}</span>\r\n                      <el-button type=\"text\" size=\"mini\" @click=\"deleteNotification(item.noticeId)\">删除</el-button>\r\n                    </div>\r\n                    <div class=\"notification-info\">\r\n                      <div>商品：{{ item.name }}</div>\r\n                      <div>金额：¥{{ item.actual }}</div>\r\n                      <div>状态：{{ item.status }}</div>\r\n                      <div>时间：{{ item.time }}</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <el-button slot=\"reference\" type=\"text\" class=\"notice-button\">\r\n              <i class=\"el-icon-bell\" style=\"font-size: 20px\"></i>\r\n            </el-button>\r\n          </el-popover>\r\n        </el-badge>\r\n\r\n        <el-dropdown placement=\"bottom\">\r\n          <div class=\"avatar\">\r\n            <img :src=\"user.avatar || 'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png'\" />\r\n            <div>{{ user.name ||  '' }}</div>\r\n          </div>\r\n          <el-dropdown-menu slot=\"dropdown\">\r\n            <el-dropdown-item @click.native=\"goToPerson\">个人信息</el-dropdown-item>\r\n            <el-dropdown-item @click.native=\"$router.push('/password')\">修改密码</el-dropdown-item>\r\n            <el-dropdown-item @click.native=\"logout\">退出登录</el-dropdown-item>\r\n          </el-dropdown-menu>\r\n        </el-dropdown>\r\n      </div>\r\n    </div>\r\n\r\n    <!--  主体  -->\r\n    <div class=\"manager-main\">\r\n      <!--  侧边栏  -->\r\n      <div class=\"manager-main-left\">\r\n        <el-menu :default-openeds=\"['info', 'user']\" router style=\"border: none\" :default-active=\"$route.path\">\r\n          <el-menu-item index=\"/home\">\r\n            <i class=\"el-icon-s-home\"></i>\r\n            <span slot=\"title\">系统首页</span>\r\n          </el-menu-item>\r\n          <el-submenu index=\"info\">\r\n            <template slot=\"title\">\r\n              <i class=\"el-icon-menu\"></i><span>信息管理</span>\r\n            </template>\r\n            <el-menu-item index=\"/category\">商品分类信息</el-menu-item>\r\n            <el-menu-item index=\"/goods\">商品信息</el-menu-item>\r\n            <el-menu-item index=\"/orders\">订单管理信息</el-menu-item>\r\n            <el-menu-item index=\"/banner\" v-if=\"user.role === 'ADMIN'\" >广告信息</el-menu-item>\r\n            <!--权限修改-->\r\n            <el-menu-item index=\"/notice\" v-if=\"user.role === 'ADMIN'\" >公告信息</el-menu-item>\r\n            <el-menu-item index=\"/collect\">店铺收藏信息</el-menu-item>\r\n            <el-menu-item index=\"/comment\">店铺评论信息</el-menu-item>\r\n\r\n          </el-submenu>\r\n\r\n          <el-submenu index=\"user\" v-if=\"user.role === 'ADMIN'\">\r\n            <template slot=\"title\">\r\n              <i class=\"el-icon-menu\"></i><span>角色管理</span>\r\n            </template>\r\n            <el-menu-item index=\"/admin\">管理员信息</el-menu-item>\r\n            <el-menu-item index=\"/business\">商家信息</el-menu-item>\r\n            <el-menu-item index=\"/user\">用户管理</el-menu-item>\r\n\r\n          </el-submenu>\r\n        </el-menu>\r\n      </div>\r\n\r\n      <!--  数据表格  -->\r\n      <div class=\"manager-main-right\">\r\n        <router-view @update:user=\"updateUser\" />\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"Manager\",\r\n  data() {\r\n    return {\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n      notifications: [], // 通知列表\r\n      showNotifications: false, // 控制通知列表显示\r\n      notificationTimer: null // 轮询定时器\r\n    }\r\n  },\r\n  created() {\r\n    if (!this.user.id) {\r\n      this.$router.push('/login')\r\n    }\r\n    this.loadNotifications() // 加载通知\r\n    // 启动轮询，每30秒检查一次新通知\r\n    this.startNotificationPolling()\r\n  },\r\n  beforeDestroy() {\r\n    // 组件销毁前清除定时器\r\n    this.stopNotificationPolling()\r\n  },\r\n  methods: {\r\n    updateUser() {\r\n      this.user = JSON.parse(localStorage.getItem('xm-user') || '{}')   // 重新获取下用户的最新信息\r\n    },\r\n    goToPerson() {\r\n      if (this.user.role === 'ADMIN') {\r\n        this.$router.push('/adminPerson')\r\n      } else if (this.user.role === 'BUSINESS') {\r\n        this.$router.push('/businessPerson')\r\n      }\r\n    },\r\n    logout() {\r\n      localStorage.removeItem('xm-user')\r\n      this.$router.push('/login')\r\n    },\r\n    // 启动通知轮询\r\n    startNotificationPolling() {\r\n      // 清除可能存在的旧定时器\r\n      this.stopNotificationPolling()\r\n      // 设置新的定时器，每30秒执行一次\r\n      this.notificationTimer = setInterval(() => {\r\n        this.loadNotifications()\r\n      }, 30000) // 30秒\r\n    },\r\n\r\n    // 停止通知轮询\r\n    stopNotificationPolling() {\r\n      if (this.notificationTimer) {\r\n        clearInterval(this.notificationTimer)\r\n        this.notificationTimer = null\r\n      }\r\n    },\r\n\r\n    // 加载通知列表\r\n    loadNotifications() {\r\n      this.$request.get('/orderNotic/getAll').then(res => {\r\n        if (res.code === '200') {\r\n          const oldLength = this.notifications.length\r\n          this.notifications = res.data || []\r\n          // 如果有新通知，显示提示\r\n          if (this.notifications.length > oldLength) {\r\n            this.$notify({\r\n              title: '新订单通知',\r\n              message: `您有${this.notifications.length - oldLength}条新订单通知`,\r\n              type: 'info',\r\n              duration: 3000\r\n            })\r\n          }\r\n        }\r\n      })\r\n    },\r\n    // 删除通知\r\n    deleteNotification(id) {\r\n      this.$confirm('确认删除该通知吗？', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        this.$request.post('/orderNotic/logicDel', { id }).then(res => {\r\n          if (res.code === '200') {\r\n            this.$message.success('删除成功')\r\n            this.loadNotifications() // 重新加载通知列表\r\n          }\r\n        })\r\n      }).catch(() => {})\r\n    },\r\n    // 清空所有通知\r\n    clearAllNotifications() {\r\n      this.$confirm('确认清空所有通知吗？', '提示', {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }).then(() => {\r\n        // 逐个删除通知\r\n        const deletePromises = this.notifications.map(item => \r\n          this.$request.post('/orderNotic/logicDel', { id: item.noticeId })\r\n        )\r\n        Promise.all(deletePromises).then(() => {\r\n          this.$message.success('清空成功')\r\n          this.loadNotifications() // 重新加载通知列表\r\n        })\r\n      }).catch(() => {})\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n@import \"@/assets/css/manager.css\";\r\n\r\n.notice-badge {\r\n  margin-right: 20px;\r\n}\r\n\r\n.notice-button {\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.notification-list {\r\n  max-height: 400px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.notification-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 10px 0;\r\n  border-bottom: 1px solid #eee;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.notification-items {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n}\r\n\r\n.notification-item {\r\n  padding: 10px;\r\n  border-bottom: 1px solid #f0f0f0;\r\n}\r\n\r\n.notification-title {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.notification-info {\r\n  font-size: 13px;\r\n  color: #666;\r\n  line-height: 1.5;\r\n}\r\n\r\n.empty-notice {\r\n  text-align: center;\r\n  color: #999;\r\n  padding: 20px 0;\r\n}\r\n</style>"],"mappings":";AAmHA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACAC,aAAA;MAAA;MACAC,iBAAA;MAAA;MACAC,iBAAA;IACA;EACA;;EACAC,QAAA;IACA,UAAAR,IAAA,CAAAS,EAAA;MACA,KAAAC,OAAA,CAAAC,IAAA;IACA;IACA,KAAAC,iBAAA;IACA;IACA,KAAAC,wBAAA;EACA;EACAC,cAAA;IACA;IACA,KAAAC,uBAAA;EACA;EACAC,OAAA;IACAC,WAAA;MACA,KAAAjB,IAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;IACA;;IACAc,WAAA;MACA,SAAAlB,IAAA,CAAAmB,IAAA;QACA,KAAAT,OAAA,CAAAC,IAAA;MACA,gBAAAX,IAAA,CAAAmB,IAAA;QACA,KAAAT,OAAA,CAAAC,IAAA;MACA;IACA;IACAS,OAAA;MACAjB,YAAA,CAAAkB,UAAA;MACA,KAAAX,OAAA,CAAAC,IAAA;IACA;IACA;IACAE,yBAAA;MACA;MACA,KAAAE,uBAAA;MACA;MACA,KAAAR,iBAAA,GAAAe,WAAA;QACA,KAAAV,iBAAA;MACA;IACA;;IAEA;IACAG,wBAAA;MACA,SAAAR,iBAAA;QACAgB,aAAA,MAAAhB,iBAAA;QACA,KAAAA,iBAAA;MACA;IACA;IAEA;IACAK,kBAAA;MACA,KAAAY,QAAA,CAAAC,GAAA,uBAAAC,IAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAAC,IAAA;UACA,MAAAC,SAAA,QAAAxB,aAAA,CAAAyB,MAAA;UACA,KAAAzB,aAAA,GAAAsB,GAAA,CAAA5B,IAAA;UACA;UACA,SAAAM,aAAA,CAAAyB,MAAA,GAAAD,SAAA;YACA,KAAAE,OAAA;cACAC,KAAA;cACAC,OAAA,YAAA5B,aAAA,CAAAyB,MAAA,GAAAD,SAAA;cACAK,IAAA;cACAC,QAAA;YACA;UACA;QACA;MACA;IACA;IACA;IACAC,mBAAA3B,EAAA;MACA,KAAA4B,QAAA;QACAC,iBAAA;QACAC,gBAAA;QACAL,IAAA;MACA,GAAAR,IAAA;QACA,KAAAF,QAAA,CAAAgB,IAAA;UAAA/B;QAAA,GAAAiB,IAAA,CAAAC,GAAA;UACA,IAAAA,GAAA,CAAAC,IAAA;YACA,KAAAa,QAAA,CAAAC,OAAA;YACA,KAAA9B,iBAAA;UACA;QACA;MACA,GAAA+B,KAAA;IACA;IACA;IACAC,sBAAA;MACA,KAAAP,QAAA;QACAC,iBAAA;QACAC,gBAAA;QACAL,IAAA;MACA,GAAAR,IAAA;QACA;QACA,MAAAmB,cAAA,QAAAxC,aAAA,CAAAyC,GAAA,CAAAC,IAAA,IACA,KAAAvB,QAAA,CAAAgB,IAAA;UAAA/B,EAAA,EAAAsC,IAAA,CAAAC;QAAA,EACA;QACAC,OAAA,CAAAC,GAAA,CAAAL,cAAA,EAAAnB,IAAA;UACA,KAAAe,QAAA,CAAAC,OAAA;UACA,KAAA9B,iBAAA;QACA;MACA,GAAA+B,KAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}